// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model temp {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  images        Image[] @relation("images")
  imagesAllowed Int     @default(10)

  // Liked Images
  likedImages    Image[]  @relation("likes", fields: [likedImagesIds], references: [id])
  likedImagesIds String[] @db.ObjectId

  // Saved Images
  savedImagesIds String[] @db.ObjectId
  savedImages    Image[]  @relation("saves", fields: [savedImagesIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]
}

model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  name        String
  description String
  image       String
  imageId     String
  tags        String[]

  // Likes
  likesIds String[] @db.ObjectId
  likes    User[]   @relation("likes", fields: [likesIds], references: [id])

  // Saved To
  savedToIds String[] @db.ObjectId
  savedTo    User[]   @relation("saves", fields: [savedToIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation("images", fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
